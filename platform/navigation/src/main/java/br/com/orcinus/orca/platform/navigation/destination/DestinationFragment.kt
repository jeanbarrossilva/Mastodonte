/*
 * Copyright Â© 2024 Orcinus
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program. If
 * not, see https://www.gnu.org/licenses.
 */

package br.com.orcinus.orca.platform.navigation.destination

import android.content.Context
import android.view.View
import androidx.annotation.CallSuper
import androidx.fragment.app.Fragment
import br.com.orcinus.orca.ext.reflection.access
import kotlin.reflect.KMutableProperty1
import kotlin.reflect.full.declaredMemberProperties

/**
 * [Fragment] whose ID has been assigned lazily, after it has been hosted by a container.
 * Essentially means that it wasn't "inherited" from such and didn't originate from an `android:id`
 * XML attribute.
 *
 * @param id Provides the identifier to be defined as this [DestinationFragment]'s.
 * @see getId
 */
abstract class DestinationFragment
@Throws(NoSuchFieldException::class)
constructor(internal val id: () -> Int) : Fragment() {
  @CallSuper
  override fun onAttach(context: Context) {
    super.onAttach(context)
    setId()
  }

  /** Identifies this [DestinationFragment] with the result of the predefined [id]. */
  @Throws(NoSuchFieldException::class)
  private fun setId() {
    val id = id()
    setId(id)
  }

  /**
   * Identifies this [DestinationFragment] with the given [id].
   *
   * @param id Identifier to be defined as this [DestinationFragment]'s.
   * @throws NoSuchFieldException If the property responsible for holding the ID isn't found (since
   *   it's private API as of `androidx.fragment` 1.7.0.
   */
  @Throws(NoSuchFieldException::class)
  internal fun setId(id: Int) {
    Fragment::class
      .declaredMemberProperties
      .filterIsInstance<KMutableProperty1<Fragment, Int>>()
      .singleOrNull { it.name == "mFragmentId" }
      ?.access { set(this@DestinationFragment, id) }
      ?: throw NoSuchFieldException("Fragment.mFragmentId")
  }

  companion object {
    /**
     * ID of a [DestinationFragment] that hasn't been explicitly identified.
     *
     * @see getId
     */
    internal const val NO_ID = 0

    /**
     * Generates an identifier that doesn't collide with those generated by the Android Asset
     * Packaging Tool (AAPT).
     */
    internal fun generateID(): Int {
      return View.generateViewId()
    }
  }
}
