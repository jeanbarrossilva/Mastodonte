/*
 * Copyright Â© 2024 Orcinus
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program. If
 * not, see https://www.gnu.org/licenses.
 */

package br.com.orcinus.orca.core.mastodon.instance.requester.resumption.request

import androidx.annotation.Discouraged
import androidx.annotation.StringDef
import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey
import br.com.orcinus.orca.core.mastodon.instance.requester.InternalRequesterApi
import io.ktor.http.Headers
import io.ktor.http.content.PartData

/**
 * Persistable entity of an HTTP request.
 *
 * @property id Identifier generated by Room.
 * @property methodName Name of the HTTP method called on the [route].
 * @property route Specific resource on which the HTTP method is being called.
 * @property headers [String]-serialized form of the added [Headers].
 * @property form Serialized version of multiple [PartData].
 * @property timestamp Unix time in which the request was performed.
 * @throws IllegalStateException If the [methodName] isn't that of a supported method (that is,
 *   isn't one of the constants defined by [MethodName]).
 */
@Entity(tableName = "requests")
internal data class Request
@Discouraged("Requests should be instantiated with a generated identifier.")
@InternalRequesterApi
@Throws(IllegalStateException::class)
constructor(
  @PrimaryKey val id: Int,
  @ColumnInfo(name = "method_name") @MethodName val methodName: String,
  val route: String,
  val headers: String,
  val form: String,
  val timestamp: Long
) {
  /** Constrains an HTTP method name to the ones that are currently supported. */
  @InternalRequesterApi
  @StringDef(MethodName.DELETE, MethodName.GET, MethodName.POST)
  annotation class MethodName {
    companion object {
      /** Name of the `DELETE` HTTP method. */
      const val DELETE = "DELETE"

      /** Name of the `GET` HTTP method. */
      const val GET = "GET"

      /** Name of the `POST` HTTP method. */
      const val POST = "POST"
    }
  }

  /**
   * Persistable structure of an HTTP request whose identifier is automatically generated by Room.
   *
   * @param methodName Name of the HTTP method called on the [route].
   * @param route Specific resource on which the HTTP method is being called.
   * @param headers [String]-serialized form of the added [Headers].
   * @param form Serialized version of multiple [PartData].
   * @param timestamp Unix time in which the request was performed.
   * @throws IllegalStateException If the [methodName] isn't that of a supported method (that is,
   *   isn't one of the constants defined by [MethodName]).
   */
  @InternalRequesterApi
  @Suppress("DiscouragedApi")
  @Throws(IllegalStateException::class)
  constructor(
    @MethodName methodName: String,
    route: String,
    headers: String,
    form: String,
    timestamp: Long
  ) : this(
    generateID(methodName, route, headers, form),
    methodName,
    route,
    headers,
    form,
    timestamp
  )

  init {
    fold(onDelete = {}, onGet = {}, onPost = {})
  }

  /**
   * Invokes one of the specified lambdas depending on whose HTTP method the [methodName] is.
   *
   * @param T Result of executing one of the functions.
   * @param onDelete Callback called if this structure is of a `DELETE` request.
   * @param onGet Operation to be performed in case this is the structure of a `GET` request.
   * @param onPost Action to run when this is a `POST` request's structure.
   * @throws IllegalStateException If the [methodName] isn't that of a supported method (that is,
   *   isn't one of the constants defined by [MethodName]).
   */
  @InternalRequesterApi
  @Throws(IllegalStateException::class)
  inline fun <T> fold(onDelete: () -> T, onGet: () -> T, onPost: () -> T): T {
    return when (methodName) {
      MethodName.DELETE -> onDelete()
      MethodName.GET -> onGet()
      MethodName.POST -> onPost()
      else -> throw IllegalStateException("No known method named \"$methodName\".")
    }
  }

  companion object {
    /**
     * Generates an unique identifier for a [Request].
     *
     * @param methodName Name of the HTTP method called on the [route].
     * @param route Specific resource on which the HTTP method is being called.
     * @param headers [String]-serialized form of the [Headers] to be added.
     * @param form Serialized version of multiple [PartData].
     */
    @InternalRequesterApi
    fun generateID(
      @MethodName methodName: String,
      route: String,
      headers: String,
      form: String
    ): Int {
      return methodName.plus(route).plus(headers).plus(form).hashCode()
    }
  }
}
