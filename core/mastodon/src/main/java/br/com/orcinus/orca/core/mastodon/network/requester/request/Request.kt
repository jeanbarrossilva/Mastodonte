/*
 * Copyright Â© 2024 Orcinus
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program. If
 * not, see https://www.gnu.org/licenses.
 */

package br.com.orcinus.orca.core.mastodon.network.requester.request

import androidx.annotation.Discouraged
import androidx.annotation.StringDef
import androidx.room.Entity
import androidx.room.PrimaryKey
import br.com.orcinus.orca.core.mastodon.network.requester.InternalRequesterApi
import io.ktor.http.Parameters
import kotlinx.serialization.KSerializer

/**
 * Persistable entity of an HTTP request.
 *
 * @param id Identifier generated by Room.
 * @param authentication Authentication requirement that's been deemed appropriate.
 * @param methodName Name of the HTTP method called on the [route].
 * @param route Specific resource on which the HTTP method is being called.
 * @param parameters [Parameters] represented as a JSON object converted by a [KSerializer] into a
 *   [String].
 * @throws IllegalStateException If the [methodName] isn't that of a supported method (that is,
 *   isn't one of the constants defined by [MethodName]).
 * @see Parameters.Companion.serializer
 */
@Entity(tableName = "requests")
internal data class Request
@Discouraged("An identifier should automatically be generated by Room.")
@InternalRequesterApi
@Throws(IllegalStateException::class)
constructor(
  @PrimaryKey(autoGenerate = true) val id: Int,
  val authentication: Authentication,
  @MethodName val methodName: String,
  val route: String,
  val parameters: String
) {
  /** Constrains an HTTP method name to the ones that are currently supported. */
  @InternalRequesterApi
  @StringDef(MethodName.DELETE, MethodName.GET, MethodName.POST)
  annotation class MethodName {
    companion object {
      /** Name of the `DELETE` HTTP method. */
      const val DELETE = "DELETE"

      /** Name of the `GET` HTTP method. */
      const val GET = "GET"

      /** Name of the `POST` HTTP method. */
      const val POST = "POST"
    }
  }

  /**
   * Persistable structure of an HTTP request whose identifier is automatically generated by Room.
   *
   * @param authentication Authentication requirement that's been deemed appropriate.
   * @param methodName Name of the HTTP method called on the [route].
   * @param route Specific resource on which the HTTP method is being called.
   * @param parameters [Parameters] represented as a JSON object converted by a [KSerializer] into a
   *   [String].
   * @throws IllegalStateException If the [methodName] isn't that of a supported method (that is,
   *   isn't one of the constants defined by [MethodName]).
   * @see Parameters.Companion.serializer
   */
  @InternalRequesterApi
  @Suppress("DiscouragedApi")
  @Throws(IllegalStateException::class)
  constructor(
    authentication: Authentication,
    @MethodName methodName: String,
    route: String,
    parameters: String
  ) : this(id = 0, authentication, methodName, route, parameters)

  init {
    fold(onDelete = {}, onGet = {}, onPost = {})
  }

  /**
   * Invokes one of the specified lambdas depending on whose HTTP method the [methodName] is.
   *
   * @param T Result of executing one of the functions.
   * @param onDelete Callback called if this structure is of a `DELETE` request.
   * @param onGet Operation to be performed in case this is the structure of a `GET` request.
   * @param onPost Action to run when this is a `POST` request's structure.
   * @throws IllegalStateException If the [methodName] isn't that of a supported method (that is,
   *   isn't one of the constants defined by [MethodName]).
   */
  @InternalRequesterApi
  @Throws(IllegalStateException::class)
  inline fun <T> fold(onDelete: () -> T, onGet: () -> T, onPost: () -> T): T {
    return when (methodName) {
      MethodName.DELETE -> onDelete()
      MethodName.GET -> onGet()
      MethodName.POST -> onPost()
      else -> throw IllegalStateException("No known method named \"$methodName\".")
    }
  }
}
